#
# @TEST-EXEC:  hilti-build %INPUT -o a.out
# @TEST-EXEC:  ./a.out 2>&1 | sort >output
# @TEST-EXEC:  btest-diff output

module Main

import Hilti

context {
    addr orig_h,
    port orig_p,
    addr resp_h,
    port resp_p
}

type Connection = scope { orig_h, orig_p, resp_h, resp_p }
type Originator = scope { orig_h }
type Global     = scope { }

void FuncConn() &scope=Connection {
    local ref<Context> ctx
    local int<64> vid
    local string s

    vid = thread.id
    ctx = thread.get_context

    s = call Hilti::fmt("FuncConn: vid %d ctx %s", (vid, ctx))
    call Hilti::print (s)
}

void FuncOrig() &scope=Originator {
    local ref<Context> ctx
    local int<64> vid
    local string s

    vid = thread.id
    ctx = thread.get_context

    s = call Hilti::fmt("FuncOrig: vid %d ctx %s", (vid, ctx))
    call Hilti::print (s)
}

void FuncGlobal() &scope=Global {
    local ref<Context> ctx
    local int<64> vid
    local string s

    vid = thread.id
    ctx = thread.get_context

    s = call Hilti::fmt("FuncGlobal: vid %d ctx %s", (vid, ctx))
    call Hilti::print (s)
}

void run() &scope=Connection {
    thread.set_context (192.160.0.1, 1234/tcp, 10.0.0.1, 80/tcp)
    thread.schedule FuncConn()
    thread.schedule FuncOrig()
    thread.schedule FuncGlobal()
    thread.schedule FuncConn()
    thread.schedule FuncOrig()
    thread.schedule FuncGlobal()

    thread.set_context (192.160.0.1, 1234/tcp, 10.0.0.2, 80/tcp)
    thread.schedule FuncConn()
    thread.schedule FuncOrig()
    thread.schedule FuncGlobal()
    thread.schedule FuncConn()
    thread.schedule FuncOrig()
    thread.schedule FuncGlobal()

    thread.set_context (192.160.0.2, 1234/tcp, 10.0.0.2, 80/tcp)
    thread.schedule FuncConn()
    thread.schedule FuncOrig()
    thread.schedule FuncGlobal()
    thread.schedule FuncConn()
    thread.schedule FuncOrig()
    thread.schedule FuncGlobal()

    thread.set_context (192.160.0.1, 1234/tcp, 10.0.0.1, 80/tcp)
    thread.schedule FuncConn()
    thread.schedule FuncOrig()
    thread.schedule FuncGlobal()
    thread.schedule FuncConn()
    thread.schedule FuncOrig()
    thread.schedule FuncGlobal()

}
