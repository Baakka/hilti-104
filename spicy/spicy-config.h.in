
#ifndef SPICY_CONFIG_H
#define SPICY_CONFIG_H

#include <list>
#include <string>

using std::string;

namespace spicy {

/// All flags here are on top of those from HILTI, we don't repeat them here.
struct Configuration {
    string version       = "${SPICY_VERSION}";
    string prefix        = "${PROJECT_SOURCE_DIR}";
    string distbase      = "${PROJECT_SOURCE_DIR}";
    string path_spicy = "${PROJECT_BINARY_DIR}/tools/spicyc";

    ////

    std::list<string> compiler_include_dirs = {
        "${PROJECT_SOURCE_DIR}/spicy",
        "${PROJECT_BINARY_DIR}/spicy",
    };

    std::list<string> compiler_cflags = {
    };

    std::list<string> compiler_cxxflags = {
    };

    std::list<string> compiler_ldflags = {
        "-L${PROJECT_BINARY_DIR}/spicy",
        "-Wl,-rpath,${PROJECT_BINARY_DIR}/spicy"
    };

    std::list<string> compiler_library_dirs = {
        "${PROJECT_BINARY_DIR}/spicy"
    };

    std::list<string> compiler_static_libraries = {
        "spicy"
    };

    std::list<string> compiler_shared_libraries = {
    };

    ////

    string runtime_library_bca      = "${PROJECT_BINARY_DIR}/libspicy/libspicy-rt.bc";
    string runtime_library_bca_dbg  = "${PROJECT_BINARY_DIR}/libspicy/libspicy-rt-dbg.bc";
    string runtime_library_hlt      = "${PROJECT_BINARY_DIR}/libspicy/spicyhilti.hlt";

    std::list<string> runtime_include_dirs = {
        "${PROJECT_SOURCE_DIR}/libspicy",
        "${PROJECT_BINARY_DIR}/libspicy",
    };

    std::list<string> runtime_cflags = {
    };

    std::list<string> runtime_cxxflags = {
    };

    std::list<string> runtime_ldflags = {
        "-L${PROJECT_BINARY_DIR}/libspicy",
        "-Wl,-rpath,${PROJECT_BINARY_DIR}/libspicy"
    };

    std::list<string> runtime_shared_libraries = {
        "z"
    };

    ////

    std::list<string> spicy_library_dirs = {
        ".",
        "${PROJECT_SOURCE_DIR}/libspicy",
        "${PROJECT_BINARY_DIR}/libspicy/autogen"
    };

};

inline const Configuration& configuration()
{
    // TOOD: We allocate this dynamically so that it doesn't get destroyed
    // at termination. Had some crashes at that time.
    static Configuration* cfg = new Configuration;
    return *cfg;
}

}

#endif
