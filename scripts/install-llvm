#! /usr/bin/env bash
#
# Note: we used libcxxrt instead of libc++abi currently because the latter
# causes trouble on Linux with libc++ (specfically, cerr doesn't work.)
# Once can however switch between the two by changing USE_LIBCXXRT below.

USE_LIBCXXRT=1

if [ "$1" = "--install" ]; then
    mode=install
    install=1
fi

if [ "$1" = "--update" ]; then
    mode=update
    update=1
fi

if [ $# != 3 -o "$mode" = "" ]; then
    echo "usage: `basename $0` [--install|--update] <where-to-clone-into> <install-prefix>"
    exit 1
fi

src=$2
prefix=$3

export PATH=$prefix/bin:$PATH

#XXXXXX Remove

make -j 4 clean

if [ "$install" != "" ]; then
        LDFLAGS="-lc++ -lcxxrt -L$prefix/lib -Wl,-rpath,$prefix/lib" \
        CFLAGS="-L$prefix/lib" CXXFLAGS="-L$prefix/lib" \
        CC=clang CXX=clang++ \
        ./configure --prefix=$prefix --enable-optimized --enable-libcpp
fi

make -j 4
make install


exit 

#XXXXXX

if [ "$update" != "" ]; then
    for d in $prefix $prefix/bin $src; do
        if [ ! -d $d ]; then
            echo "$d does not exist."
            exit 1
        fi
    done
fi

if [ "$install" != "" ]; then
    test -d $src && echo "$src already exists" && exit 1
fi

d=`dirname $0`
patches=`cd $d; pwd`/llvm-patches

cd `dirname $src`

# Get/update the repositories.

if [ "$install" != "" ]; then
    git clone http://llvm.org/git/llvm.git `basename $src`
    ( cd $src/tools && git clone http://llvm.org/git/clang.git )
    ( cd $src/projects && git clone http://llvm.org/git/libcxx )

    if [ "$USE_LIBCXXRT" != "1" ]; then
        ( cd $src/projects && git clone http://llvm.org/git/libcxxabi )
    else
        ( cd $src/projects && git clone https://github.com/pathscale/libcxxrt )
    fi

else
    ( cd $src && git pull --rebase )
    ( cd $src/tools/clang && git pull --rebase )
    ( cd $src/projects/libcxx && git pull --rebase )

    if [ "$USE_LIBCXXRT" != "1" ]; then
        ( cd $src/projects/libcxxabi && git pull --rebase )
    else
        ( cd $src/projects/libcxxrt && git pull --rebase )
    fi
fi

# Apply any patches we might need.
for i in $patches/*; do
    echo Applying $i ...
    b=`basename $i`
    ( cd `echo $b | awk -v src=$src -F - '{printf("%s/%s/%s", src, $1, $2);}'` && pwd && cat $i | git am -3 )
done

# To boostrap, compile and install LLVM and clang initially without libc++.
cd $src

if [ "$install" != "" ]; then
    ./configure --prefix=$prefix --enable-optimized
    make -j 4
    make install
    make clean
fi

# Build and install the libraries.

if [ "$USE_LIBCXXRT" != "1" ]; then
    ( cd projects/libcxx/lib && CXX="clang++ -I ../../libcxxabi/include" ./buildit )
    cp projects/libcxx/lib/libc++.so.1.0 $prefix/lib

    if [ "$install" != "" ]; then
        ln -s $prefix/lib/libc++.so.1.0 $prefix/lib/libc++.so.1
        ln -s $prefix/lib/libc++.so.1.0 $prefix/lib/libc++.so
    fi

    ( cd projects/libcxxabi/lib && CC="clang -L$prefix/lib" ./buildit )
    cp projects/libcxxabi/lib/libc++abi.so.1.0 $prefix/lib
    cp projects/libcxxabi/include/cxxabi.h $prefix/lib/c++/v1/

    if [ "$install" != "" ]; then
        ln -s $prefix/lib/libc++abi.so.1.0 $prefix/lib/libc++abi.so.1
        ln -s $prefix/lib/libc++abi.so.1.0 $prefix/lib/libc++abi.so
    fi

else
    ( cd projects/libcxxrt && rm -rf build && mkdir build && cd build && CFLAGS="-ldl" && cmake .. && make )
    ( cd projects/libcxx/lib && CXX="clang++ -I ../../libcxxrt/src -DLIBCXXRT" CC="clang -L../../libcxxrt/build/lib -lcxxrt" ./buildit )

    cp projects/libcxx/lib/libc++.so.1.0 $prefix/lib
    cp projects/libcxxrt/build/lib/libcxxrt.so $prefix/lib/libcxxrt.so.1.0
    cp projects/libcxxrt/src/cxxabi.h $prefix/lib/c++/v1/

    if [ "$install" != "" ]; then
        ln -s $prefix/lib/libc++.so.1.0 $prefix/lib/libc++.so.1
        ln -s $prefix/lib/libc++.so.1.0 $prefix/lib/libc++.so
        ln -s $prefix/lib/libcxxrt.so.1.0 $prefix/lib/libcxxrt.so.1
        ln -s $prefix/lib/libcxxrt.so.1.0 $prefix/lib/libcxxrt.so
    fi
fi

exit 1

# Now compile LLVM/clang with the new libaries.

make -j 4 clean

if [ "$install" != "" ]; then
    LD_LIBRARY_PATH=$prefix \
        LDFLAGS="-lc++ -L$prefix/lib -Wl,-rpath,$prefix/lib" \
        CFLAGS="-L$prefix/lib" CXXFLAGS="-L$prefix/lib" \
        CC=clang CXX=clang++ \
        ./configure --prefix=$prefix --enable-optimized --enable-libcpp
fi

make -j 4
make install
