#! /usr/bin/env python
#
# Autogenerates visitor-interface.h from a list of classes. Outputs:
#
#   <dst-dir>/visitor-interface.h
#   <dst-dir>/visitor-types.h
#   <dst-dir>/visitor-template.h    # Template methods decls for c&p use in a visitor.
#   <dst-dir>/visitor-template.cc   # Template methods implementations for c&p use in a visitor.


import os.path
import sys

if len(sys.argv) != 4:
	print >>sys.stderr, "usage: %s <namespace> <decl-file> <dst-dir>\n" % sys.argv[0]
	sys.exit(1)

namespace = sys.argv[1]
decls     = sys.argv[2]
dst       = sys.argv[3]

classes = []

for line in open(decls):

	line = line.strip()

	if not line or line.startswith("#"):
		continue

	classes += [line]

classes.sort()

interface = open(os.path.join(dst, "visitor-interface.h"), "w")
types     = open(os.path.join(dst, "visitor-types.h"), "w")
tmpl_h    = open(os.path.join(dst, "visitor-template.h"), "w")
tmpl_cc   = open(os.path.join(dst, "visitor-template.cc"), "w")

print >>types, "namespace %s" % namespace, "{"
print >>types, ""

for cls in classes:
	m = cls.split("::")

	for ns in m[:-1]:
		print >>types, "namespace %s {" % ns,

	print >>types, "class %s;" % m[-1],

	for ns in m[:-1]:
		print >>types, "}",

 	print >>types, ""

	print >>interface, "virtual void visit(%s* n) {}" % cls

	first = m[-1].lower()[0]

	print >>tmpl_h, "    void visit(%s* %s) override;" % (cls, first)
	print >>tmpl_cc, "void XXX::visit(%s* %s)\n{\n}\n" % (cls, first)

print >>types, ""
print >>types, "}",

