#! /usr/bin/env python
#
# Parses the output from HILTI_DEBUG=hilti-mem from stdin and reports on memory leaks.
#
# If -v is given, reports details for every leak.

import sys
import optparse
import subprocess

optparser = optparse.OptionParser(usage="%prog [options] <input-file>")

optparser.add_option("-v", "--verbose", action="store_true", dest="verbose", default=False,
                     help="include detailed output for leaks")

(options, args) = optparser.parse_args()

if len(args) != 0:
    optparser.error("too many arguments")

objs = {}

sorted = subprocess.Popen("sort -n", shell=True, stdin=sys.stdin, stdout=subprocess.PIPE).stdout

for line in sorted:

    if not "[hilti-mem" in line:
        continue

    m = line.split()

    try:
        (cnt, dbg, op, addr, size, refcnt, type, location) = m[0:8]
    except ValueError:
        location = ""
        try:
            (cnt, dbg, op, addr, size, refcnt, type) = m[0:7]
        except ValueError:
            print >>sys.stderr, "Cannot parse |%s|" % line
            sys.exit(1)

    if op == "free":
        try:
            del objs[addr]
        except KeyError:
            pass

        continue

    try:
        objs[addr] += [(op, line)]
    except KeyError:
        objs[addr] = [(op, line)]

leaks = 0

for lines in objs.values():
    for (op, line) in lines:
        if op == "dtor" or op == "cctor":
            continue

        leaks += 1

if not leaks:
    sys.exit(0)

print "Leaks"
print "====="
print

for (obj, lines) in objs.items():

    (op, line) = lines[0]

    for (op, line) in lines:
        if op == "dtor" or op == "cctor":
            continue

        print " ", line,
        break

if options.verbose:
    print
    print
    print "Details"
    print "======="
    print

    for (obj, lines) in objs.items():
        first = True
        for (op, line) in lines:
            if op == "dtor" or op == "cctor":
                continue

            print ("/ " if first else "| "), line,
            first = False

        if not first:
            print ""

sys.exit(1)
