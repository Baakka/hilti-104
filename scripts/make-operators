#! /usr/bin/env bash
#
# Autogenerates files with support code implementing Spicy operators.
#
# This creates
#
#     With -h:
#       operators-declare.h
#       operators-visits.h
#       operators-expression-builder.h
#       operators-register.cc
#

scripts=`dirname $0`

function getoperators
{
    grep -h '^[\t ]*opBegin' | sed 's/.*opBegin(\(.*\)).*/\1/g' | sed 's/, /::/g' | sort
}

function lock()
{
  while true; do
        if mkdir "$1.d" 2>/dev/null; then
           break;
        fi
        echo "`basename $0`: waiting for lock $1.d ..."
        sleep 1
  done
}

function unlock ()
{
  rmdir "$1.d"
}

if [ $# -le 2 ]; then
    echo "usage: `basename $0` -h  <current-source-directory> <target-directory> *.h"
    exit 1
fi

kind=$1
src=$2
dst=$3
shift
shift
shift

cd $src

hdrs=$@
tmp=$dst/make-operators.tmp.$$

## Get the names of all operator classes (e.g., "integer::Add").
cat $hdrs | getoperators >$tmp

##### Create operators.h that includes all the operator *.h files.

if [ "$kind" == "-h" ]; then

    LOCK=$dst/lock
    TIMESTAMP=$dst/timestamp
    now=`date +%s`

    lock $LOCK
    trap "unlock $LOCK" EXIT

    if [ -e $TIMESTAMP ]; then
        ts=`cat $TIMESTAMP`
        if [ $ts -gt $now ]; then
            # Updated since we started.
            exit 0;
        fi
    fi

    #### Create operators-declare.h that declares all operator expression classes, and 
    #### operators-visits.h with visit() methods for all operator expression classes, and
    #### operators-exoression-builder.h with visit() methods for the expression builder.
    #### operators-register.cc with calls to operators register functions.

    cat </dev/null >$dst/operators-visits.h.tmp
    cat </dev/null >$dst/operators-expression-builder.h.tmp

    cat </dev/null >$dst/operators-declare.h.tmp <<EOF
namespace spicy {
EOF


    cat >$dst/operators-register.cc.tmp <<EOF

namespace spicy {

void __registerAllOperators()
{
EOF

    cat $tmp | while read line; do
        ns=`echo $line | sed 's/\(.*\)::\(.*\)/\1/g'`
        cls=`echo $line | sed 's/\(.*\)::\([^: ]*\) *\( *:[^:].*\)\{0,\}/\2/g'`
        echo "namespace expression { namespace operator_ { namespace $ns { class $cls; } } };" >>$dst/operators-declare.h.tmp

        echo "       virtual void visit(expression::operator_::$ns::$cls* i) {}" >>$dst/operators-visits.h.tmp

        echo "       void visit(expression::operator_::$ns::$cls* i) override;" >>$dst/operators-expression-builder.h.tmp

        name=`echo $line | sed 's/::/_/g'`
        echo "    extern void __register_${ns}_${cls}(); __register_${ns}_${cls}();" >>$dst/operators-register.cc.tmp
    done

    cat >>$dst/operators-register.cc.tmp <<EOF
}

}
EOF

    cat >>$dst/operators-declare.h.tmp <<EOF
}
EOF


    date +%s >$TIMESTAMP

fi

#### Put live if content has changed compared to last run.

$scripts/install-if-changed $dst/operators-register.cc.tmp $dst/operators-register.cc
$scripts/install-if-changed $dst/operators-declare.h.tmp $dst/operators-declare.h
$scripts/install-if-changed $dst/operators-expression-builder.h.tmp $dst/operators-expression-builder.h
$scripts/install-if-changed $dst/operators-visits.h.tmp $dst/operators-visits.h

#### Cleanup.

rm -f $tmp




