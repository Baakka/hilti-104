#! /usr/bin/env python

import sys
import re
import os.path

if len(sys.argv) != 4:
	print >>sys.stderr, "usage: expand-macros <control file> <input> <output-dir>"
	sys.exit(1)

macros = {}
files = {}

cls_macro = None
cls_value = "<No class>"
cls_ns = "<No namespace>"
stdifdef = os.getcwd().upper().replace(".", "_").replace("/", "_").replace("+", "_").replace("-", "_")
basename = os.path.splitext(os.path.basename(sys.argv[2]))[0]

state = "macro"

for line in open(sys.argv[1]):

	if state == "macro":
		line = line.strip()
		if not line:
			continue

		if not line.startswith(">"):
			print >>sys.stderr, "error: expected '>'"
			sys.exit(1)

		m = line.split()
		name = m[1]
		file = m[2]

		if m[0] == ">>":
			cls_macro = name

		state = "content"
		content = ""
		continue

	if state == "content":

		if line.strip() != "===":
			content += line
			continue

		if not name in macros:
			macros[name] = []

		if not file in files:
			out = os.path.join(sys.argv[3], basename + "." + file)
			files[file] = open(out, "w")

		if file == "h":
			regexp = re.compile("^ *%s(\((.*)\))?.*" % name)
		else:
			regexp = re.compile("^ *%s(\((.*)\))?" % name)

		macros[name] += [(regexp, file, files[file], content)]

		state = "macro"

noreplace = False

for (name, items) in macros.items():
	for val in items:
		(regexp, fname, file, content) = val
		content = content.replace("$STDIFDEF", stdifdef)
		content = content.replace("$BASENAME", basename)
		if name == "<<HEADER>>":
			print >>file, content

nr = 0
last_nrs = {}

for line in open(sys.argv[2]):
	found = False

	for (name, items) in macros.items():
		for val in items:
			(regexp, fname, file, content) = val

			m = regexp.match(line)

			if m:
				arg = str(m.group(2))

				if name == cls_macro:
					n = arg.split("::")

					if len(n) == 1:
						cls_value = arg

					else:
						cls_ns = n[0]
						cls_value = n[1]

				out = regexp.sub(content, line)
				out = out.replace("$1", arg)
				out = out.replace("$CLASS", cls_value)
				out = out.replace("$NAMESPACE", cls_ns)
				out = out.replace("$STDIFDEF", stdifdef)

				if nr != last_nrs.get(fname, 0):
					print >>file, "#line %d \"%s\"" % (nr, os.path.abspath(sys.argv[2]))

				last_nrs[fname] = nr
				print >>file, out,
				found = True

	if not found and "cc" in files:
		if nr != last_nrs.get("cc", -1) + 1:
			print >>files["cc"], "#line %d \"%s\"" % (nr, os.path.abspath(sys.argv[2]))

		last_nrs["cc"] = nr
		print >>files["cc"], line,

	nr += 1

for (name, items) in macros.items():
	for val in items:
		(regexp, fname, file, content) = val
		if name == "<<FOOTER>>":
			print >>file, content
