#! /usr/bin/env python

import sys
import re
import os.path

if len(sys.argv) != 4:
	print >>sys.stderr, "usage: expand-macros <control file> <input> <output-dir>"
	sys.exit(1)

macros = {}
files = {}
outputs = []

cls_macro = None
cls_value = "<No class>"
cls_value_arg = None
cls_ns = "<No namespace>"
basename = os.path.splitext(os.path.basename(sys.argv[2]))[0]
stdifdef = os.getcwd().upper().replace(".", "_").replace("/", "_").replace("+", "_").replace("-", "_") + "_" + basename.upper()

state = "macro"

for line in open(sys.argv[1]):

	if state == "macro":
		line = line.strip()
		if not line:
			continue

		if not line.startswith(">"):
			print >>sys.stderr, "error: expected '>'"
			sys.exit(1)

		m = line.split()
		name = m[1]
		file = m[2]

		if m[0] == ">>":
			cls_macro = name

		state = "content"
		content = ""
		continue

	if state == "content":

		if line.strip() != "===":
			content += line
			continue

		if not name in macros:
			macros[name] = []

		if not file in files:
			out = os.path.join(sys.argv[3], basename + "." + file)
			outtmp = out + ".tmp"
			files[file] = open(outtmp, "w")
			outputs += [(outtmp, out, files[file])]

		if file == "h":
			regexp = re.compile("^[\t ]*%s\\b(\((.*)\))?.*" % name)
		else:
			regexp = re.compile("^[\t ]*%s\\b(\((.*)\))?" % name)

		macros[name] += [(regexp, file, files[file], content)]

		state = "macro"

noreplace = False

for (name, items) in macros.items():
	for val in items:
		(regexp, fname, file, content) = val

		content = content.replace("$STDIFDEF", stdifdef)
		content = content.replace("$BASENAME", basename)
		if name == "<<HEADER>>":
			print >>file, content

nr = 0
last_nrs = {}

#split_re = re.compile(r'([,]|, *"[^"]+"))')

split_re = re.compile(r'''((?:[^,"']|"[^"]*"|'[^']*')+)''')

for line in open(sys.argv[2]):
	found = False

	if line.strip().startswith("//"):
		continue

	for (name, items) in macros.items():
		for val in items:
			(regexp, fname, file, content) = val

			m = regexp.match(line)

			if m:
				# Split at commands, but only if outside of quotation marks.
				args = split_re.split(str(m.group(2)).strip())
				args = [arg.strip() for arg in args[1:-1] if arg != ","]

				try:
					arg = args[0]
				except IndexError:
					arg = ""

				if name == cls_macro:

					# We parse name of the following format here:
					# [NAMESPACE::]CLASS [: CLASSARG]
					#
					# The pieces are assigned to the corresponding variables.
					# NAMESPACE defaults to empty; CLASSARG defaults to CLASS.

					args = [arg.replace("::", "!!!") for arg in args] # Hack for easier parsing.

					try:
						arg = args[0]
					except IndexError:
						arg = ""

					try:
						(c, cls_value_arg) = arg.split(":")
					except ValueError:
						c = arg
						cls_value_arg = None

					c = c.strip()

					try:
						(cls_ns, cls_value) = c.split("!!!")
					except ValueError:
						cls_ns = ""
						cls_value = c

					if not cls_value_arg:
						cls_value_arg = cls_value

				cls_value = cls_value.strip()
				cls_value_arg = cls_value_arg.strip()
				cls_ns = cls_ns.strip()

				out = regexp.sub(content, line)

				for i in range(1, 10):
					if i <= len(args):
						out = out.replace("$%d" % i, args[i-1])
					else:
						out = out.replace("$%d" % i, "")

				out = out.replace("$CLASSARG", cls_value_arg)
				out = out.replace("$CLASS", cls_value)
				out = out.replace("$NAMESPACE", cls_ns)
				out = out.replace("$STDIFDEF", stdifdef)

				if nr != last_nrs.get(fname, -1):
					print >>file, "#line %d \"%s\"" % (nr, os.path.abspath(sys.argv[2]))

				last_nrs[fname] = nr
				print >>file, out,
				found = True

	if not found and "cc" in files:
		if nr != last_nrs.get("cc", -2) + 1:
			print >>files["cc"], "#line %d \"%s\"" % (nr, os.path.abspath(sys.argv[2]))

		last_nrs["cc"] = nr
		print >>files["cc"], line,

	nr += 1

for (name, items) in macros.items():
	for val in items:
		(regexp, fname, file, content) = val
		if name == "<<FOOTER>>":
			print >>file, content

scripts = os.path.dirname(sys.argv[0])

for (new, old, file) in outputs:
	file.close()
	os.system("%s/install-if-changed %s %s" % (scripts, new, old))
