#! /usr/bin/env bash
#
# Autogenerates files with support code implementing instructions.
#
# This creates
#
#     With -h:
#       instructions.h
#       instructions-declare.h
#       instructions-define.cc
#       instructions-visits.h
#       instructions-stmt-builder.h
#       instructions-register.cc
#
#     With -cc:
#       foo.cc


function getInstructions
{
    grep -h '^[\t ]*iBegin' | sed 's/.*(\(.*\) *, ".*)/\1/g' | sed 's/, /::/g' | sort
}

function lock()
{
  while true; do
        if mkdir "$1.d" 2>/dev/null; then
           break;
        fi
        echo "`basename $0`: waiting for lock $1.d ..."
        sleep 1
  done
}

function unlock ()
{
  rmdir "$1.d"
}

if [ $# -le 2 ]; then
    echo "usage: `basename $0` -h  <current-source-directory> <target-directory> *.h"
    echo "                     -cc <current-source-directory> <target-directory> foo.h"
    exit 1
fi

kind=$1
src=$2
dst=$3
shift
shift
shift

cd $src

hdrs=$@
tmp=$dst/make-instructions.tmp.$$

## Get the names of all instruction classes (e.g., "integer::Add").
cat $hdrs | getInstructions >$tmp

if [ "$kind" == "-cc" ]; then

    ##### Create instructions/*.cc that registers all instructions with the InstructionRegistry.

    mkdir -p $dst/instructions

    for hdr in $hdrs; do
        cc=$dst/instructions/`echo $hdr | sed 's#.*/\([^/]*\)\.h#\1.cc#g'`

        cat >$cc <<EOF

#include <hilti/hilti-intern.h>

#include <hilti/instructions/define-instruction.h>
#include <hilti/$hdr>

EOF

        cat $hdr | getInstructions | while read line; do
            ns=`echo $line | sed 's/\(.*\)::\(.*\)/\1/g'`
            cls=`echo $line | sed 's/\(.*\)::\(.*\)/\2/g'`
            id=`echo "$cls::$ns" | sed 's/::/_/g'`
            echo "IMPLEMENT_INSTRUCTION($ns, $cls, $id);" >>$cc
        done
    done
fi

##### Create instructions.h that includes all the instruction *.h files.

if [ "$kind" == "-h" ]; then

    LOCK=$dst/lock
    TIMESTAMP=$dst/timestamp
    now=`date +%s`

    lock $LOCK
    trap "unlock $LOCK" EXIT

    if [ -e $TIMESTAMP ]; then
        ts=`cat $TIMESTAMP`
        if [ $ts -gt $now ]; then
            # Updated since we started.
            exit 0;
        fi
    fi

    cat >$dst/instructions.h <<EOF

#ifndef HILTI_INSTRUCTIONS_INSTRUCTIONS_H
#define HILTI_INSTRUCTIONS_INSTRUCTIONS_H

#include <hilti/instructions/define-instruction.h>

EOF

    cat >$dst/instructions-define.cc <<EOF

#include <hilti/hilti-intern.h>

EOF

    for h in $hdrs; do
        echo "#include <hilti/$h>" >>$dst/instructions.h
    done

    echo >>$dst/instructions.h
    echo "#endif" >>$dst/instructions.h

    #### Create instructions-declare.h that declares all instruction statement classes, and 
    #### instructions-visits.h with visit() methods for all instruction statement classes, and
    #### instructions-stmt-builder.h with visit() methods for the statement builder.
    #### instructions-register.cc with calls to instructions register functions.

    cat </dev/null >$dst/instructions-declare.h
    cat </dev/null >$dst/instructions-visits.h
    cat </dev/null >$dst/instructions-stmt-builder.h

    cat >$dst/instructions-register.cc <<EOF
void __registerAllInstructions()
{
EOF

    cat $tmp | while read line; do
        ns=`echo $line | sed 's/\(.*\)::\(.*\)/\1/g'`
        cls=`echo $line | sed 's/\(.*\)::\(.*\)/\2/g'`
        echo "namespace hilti { namespace statement { namespace instruction { namespace $ns { class $cls; } } }; }" >>$dst/instructions-declare.h
        echo "namespace hilti { namespace instruction { namespace $ns { namespace __class { class $cls; } extern shared_ptr<::hilti::instruction::$ns::__class::$cls> $cls; } }; }" >>$dst/instructions-declare.h
        echo "namespace hilti { namespace instruction { namespace $ns { namespace __class { class $cls; } shared_ptr<::hilti::instruction::$ns::__class::$cls> $cls; } } };" >>$dst/instructions-define.cc

        echo "       virtual void visit(statement::instruction::$ns::$cls* i) {}" >>$dst/instructions-visits.h

        echo "       void visit(statement::instruction::$ns::$cls* i) override;" >>$dst/instructions-stmt-builder.h

        name=`echo $line | sed 's/::/_/g'`
        echo "    extern void __register_${ns}_${cls}(); __register_${ns}_${cls}();" >>$dst/instructions-register.cc
    done

    cat >>$dst/instructions-register.cc <<EOF
}
EOF
    date +%s >$TIMESTAMP

fi

#### Cleanup.

rm -f $tmp




