#! /usr/bin/env bash

function abspath
{
    (cd "$1" && pwd)
}

base=`dirname $0`/../..
base=`abspath $base`
brobase=`cat $base/build/CMakeCache.txt | grep BRO_DIST: | cut -d = -f 2`
brobase=`abspath $brobase`
benchmarks=`dirname $0`
benchmarks=`abspath $benchmarks`

bro_addl_args="-bQ"
hilti_optimize="Hilti::optimize=F"

trace_dns="${brobase}/testing/external/bro-testing/Traces/2009-M57-day11-18.trace.gz"
trace_http="${brobase}/testing/external/bro-testing/Traces/2009-M57-day11-18.trace.gz"

# The config file can override the traces.
cfg=`basename $0`.cfg

if [ -e $cfg ]; then
    source $cfg
fi

function log_stdin
{
    tmp=stdin.$$.tmp
    cat >${tmp}
    cat ${tmp} >>${logfile}
    cat ${tmp} >/dev/tty
    rm -f ${tmp}
}

function log
{
    echo "$@" >>${logfile}
    echo "$@" >/dev/tty
}

function warning
{
    log "WARNING: $1"
}

function error
{
    log "$1"
    exit 1
}

function execute
{
    cmdline="$@"
    log "Command:   ${cmdline}"
    eval ${cmdline}
    log "Exit code: $?"
}

function create_sandbox
{
    export name=$1
    sandbox=${benchmarks}/.tmp/${name}
    rm -rf ${sandbox}
    mkdir -p ${sandbox}
    cd ${sandbox}

    log ""
    log "===="
    log "==== ${name}"
    log "===="
    log ""

    export benchmark=${name}
}

function finish_sandbox
{
    if find . -name 'core*' | grep -q .; then
       warning "There's a core file."
    fi
}

function rename_logs
{
    tag=$1

    for i in `find . -regex '.*/[^.]*.log$'`; do
        mv ${i} `echo ${i} | sed "s#\.log#.${tag}.log#g"`
    done
}

# record_timing <tag-for-baseline> <tag-for-hilti>
function record_timing
{
    tmp=timing.$$.tmp
    record_timing_helper $@ >${tmp}
    cat ${tmp} >>${datafile}
    log ""
    cat ${tmp} | log_stdin
}

first_timing=1

function record_timing_helper
{
    # ${benchmark} has benchmark name
    tag1=$1
    tag2=$2

    file1="stderr.${tag1}"
    file2="stderr.${tag2}"

    if [ ! -e ${file1} ]; then
        warning "no ${file1} for getting timing information"
        return;
    fi

    if [ ! -e ${file2} ]; then
        warning "no ${file2} for getting timing information"
        return;
    fi

  labels=`cat ${file1} ${file2} | awk '/^# / && NF==4 { print $2}' | sort | uniq`

  if [ ${first_timing} == 1 ]; then
       first_timing=0
       first_labels=$labels

       printf "benchmark type ";
       for label in cycles time rss malloc; do #  (*) Adapt with below.
           printf "${label}-ratio ${label}-base ${label}-new   ";
       done
       printf "\n";

  else
       if [ "${first_labels}" != "${labels}" ]; then
           warning "Labels differ, data will be mixed up (${first_labels}/ ${labels})"
       fi
  fi

  for label in ${labels}; do
      cat ${file1} ${file2} | grep "${label}" | sed 's#/# #g' | sed 's#M\( \|$\)# #g' | awk -vprefix="${benchmark} ${label}" '
         # core-init 2.256844 5871992554 175 67
         # core-init 2.123967 5800516230 174 67
         BEGIN { order[0] = 4; # (*) Adapt with above.
                 order[1] = 3;
                 order[2] = 5;
                 order[3] = 6;
               }

         { for ( i = 0; i < length(order); i++ )
               v[i][NR] = $(order[i]);
         }

         END { printf( "%-30s ", prefix);
               for ( i = 0; i < length(order); i++ ) {
                   r1 = v[i][1];
                   r2 = v[i][2];

                   if ( r2 )
                       printf("%.1f ", 100.0 * r1 / r2);
                   else
                       printf("- ");

                   printf("%f %f   ", r1, r2);
                   }
               printf( "\n", label);
             }
         '
  done


    # core-init 2.228996/5876525117 174M/67M
# bro_init 0.000486/611385 0M/0M
# net-processing 0.000000/0 0M/0M
# total-processing 0.000559/724971 0M/0M
# total-script 0.000465/594113 0M/0M
# total-protocols 0.000000/0 0M/0M
# total-bro 2.229978/5877633531 176M/68M
}

function run_bro_without_trace
{
    tag=$1
    shift
    args=$@

    args="${args} ${bro_addl_args}"

    stderr="stderr.${tag}"
    stdout="stdout.${tag}"

    execute bro ${args} >${stdout} 2>${stderr}

    rename_logs ${tag}
}

function run_bro_with_trace
{
    tag=$1
    trace=$2
    shift
    shift
    args=$@

    log "Trace:     ${trace}"

    if echo ${trace} | grep -q '\.gz$'; then
        cmd=zcat
    else
        cmd=cat
    fi

    eval ${cmd} ${trace} | run_bro_without_trace ${tag} -r - ${args}
}

function normalize_output
{
    cat $1 | grep -v "^# " | cat >$1.diff.tmp
    echo $1.diff.tmp
}

function compare_output
{
    file1=$1
    file2=$2

    diff -u `normalize_output $file1` `normalize_output $file2` | log_stdin || error "=== ${file1} and ${file2} differ"
}

#### Main

source $brobase/build/bro-path-dev.sh
export BRO_PLUGINS=$base/build/bro
ulimit -c unlimited

logfile=`pwd`/benchmark.$$.log
datafile=`pwd`/benchmark.$$.dat
rm -f ${logfile}
rm -f ${datafile}

## Hello world.

enabled=1
scripts=${benchmarks}/scripts/hello-world.bro

if [ ${enabled} == 1 ]; then
    create_sandbox hello_world
    run_bro_without_trace std ${scripts}
    run_bro_without_trace hlt ${scripts} ${hilti_optimize} Hilti::compile_scripts=T
    compare_output stdout.std stdout.hlt
    compare_output stderr.std stderr.hlt
    record_timing std hlt
    finish_sandbox
fi

## Fibonacci numbers.

enabled=1
scripts=${benchmarks}/scripts/fibo.bro

if [ ${enabled} == 1 ]; then
    create_sandbox fibo
    run_bro_without_trace std ${scripts}
    run_bro_without_trace hlt ${scripts} ${hilti_optimize} Hilti::compile_scripts=T
    compare_output stdout.std stdout.hlt
    compare_output stderr.std stderr.hlt
    record_timing std hlt
    finish_sandbox
fi

## Connection counting.

enabled=1
scripts=${benchmarks}/scripts/conn-count.bro

if [ ${enabled} == 1 ]; then
    create_sandbox fibo
    run_bro_without_trace std ${scripts}
    run_bro_without_trace hlt ${scripts} ${hilti_optimize} Hilti::compile_scripts=T
    compare_output stdout.std stdout.hlt
    compare_output stderr.std stderr.hlt
    record_timing std hlt
    finish_sandbox
fi

## BinPAC++ HTTP analyzer, standard interpreter.

enabled=1
scripts=base/protocols/http

if [ ${enabled} == 1 ]; then
    create_sandbox http-pac2
    run_bro_with_trace std ${trace_http} ${scripts}
    run_bro_with_trace hlt ${trace_http} ${scripts} http.evt ${hilti_optimize} Hilti::compile_scripts=F Hilti::pac2_to_compiler=F
    compare_output stderr.std stderr.hlt # Should be empty.
    record_timing std hlt
    finish_sandbox
fi

## BinPAC++ HTTP analyzer, compiled scripts, but direct connection for events disabled.

enabled=1
scripts=base/protocols/http

if [ ${enabled} == 1 ]; then
    create_sandbox http-pac2-compiler-indirect
    run_bro_with_trace std ${trace_http} ${scripts}
    run_bro_with_trace hlt ${trace_http} ${scripts} http.evt ${hilti_optimize} Hilti::compile_scripts=T Hilti::pac2_to_compiler=F
    compare_output stderr.std stderr.hlt
    record_timing std hlt
    finish_sandbox
fi

## BinPAC++ HTTP analyzer, compiled scripts, with direct connection for events enabled.

enabled=1
scripts=base/protocols/http

if [ ${enabled} == 1 ]; then
    create_sandbox http-pac2-compiler-direct
    run_bro_with_trace std ${trace_http} ${scripts}
    run_bro_with_trace hlt ${trace_http} ${scripts} http.evt ${hilti_optimize} Hilti::compile_scripts=T Hilti::pac2_to_compiler=T
    compare_output stderr.std stderr.hlt
    record_timing std hlt
    finish_sandbox
fi

## End

log ""
log "Timing information in ${datafile}"
log ""

echo
echo === `basename ${logfile}`
echo === `basename ${datafile}`
echo
