grammar bacnet.pac2;

protocol analyzer pac2::BACnet over UDP:
    parse with BACnet::Message,
    port 47808/udp;

on BACnet::Message -> event bacnet_message($conn, $is_orig, self.func, self.len);

## BVLC management functions.
## At the moment, Read-FDT and Readt-BDT do not have their own event, beause they
## do not carry any data. Get those by examining bacnet_message.
## The same applies for Original-Unicast-MPDU, Original-Broadcast-NPDU and
## Distribute-Broadcast-To-Network.
## Forwarded-NPDU does have its own event for the extra data it contains.

on BACnet::Message if ( self.func == BACnet::BVLC_function::BVLC-Result )
  -> event bacnet_bvlc_result ($conn, self.bbmd.bvlc_result);

on BACnet::Message if ( self.func == BACnet::BVLC_function::Write-BDT )
  -> event bacnet_bvlc_write_bdt ($conn, [ BACnet::bro_bdt_entry(i) for i in self.bbmd.bdts ]);

on BACnet::Message if ( self.func == BACnet::BVLC_function::Read-BDT-ACK )
  -> event bacnet_bvlc_read_bdt_ack ($conn, [ BACnet::bro_bdt_entry(i) for i in self.bbmd.bdts ]);

on BACnet::Message if ( self.func == BACnet::BVLC_function::Register-FD )
  -> event bacnet_register_fd ($conn, self.bbmd.ttl);

on BACnet::Message if ( self.func == BACnet::BVLC_function::Read-FDT-ACK )
  -> event bacnet_bvlc_read_fdt_ack ($conn, [ BACnet::bro_fdt_entry(i) for i in self.bbmd.fdts ]);

on BACnet::Message if ( self.func == BACnet::BVLC_function::Delete-FDT-Entry )
  -> event bacnet_bvlc_delete_ftd_entry ($conn, [ BACnet::bro_fdt_entry(i) for i in self.bbmd.fdts ]);

on BACnet::Message if ( self.func == BACnet::BVLC_function::Forwarded-NPDU )
  -> event bacnet_bvlc_forwarded_npdu_information ($conn, self.originator, self.originator_port);

## BACnet NPDU NL-Messages

# this is a meta-message for every BACnet NPDU NL-message, that just contains destination networks
# as a list. Get the specific message type by looking at NPDU_info.message_type
# Messages are...
# Who-Is-Router-To-Network,
# Disconnect-Connetion-To-Network,
# Router-Busy-To-Network,
# I-Am-Router-To-Network,
# Router-Available-To-Network,
on BACnet::NPDU if ( ( self.control.nlmessage == 1 ) && (
    self.message_type == BACnet::NPDU_type::Who-Is-Router-To-Network ||
    self.message_type == BACnet::NPDU_type::Disconnect-Connection-To-Network ||
    self.message_type == BACnet::NPDU_type::I-Am-Router-To-Network ||
    self.message_type == BACnet::NPDU_type::Router-Busy-To-Network ||
    self.message_type == BACnet::NPDU_type::Router-Available-To-Network
  ) )
  -> event bacnet_npdu_network_messages ($conn, BACnet::bro_npdu_info(self), [ cast<uint64>(i) for i in self.npdu_message.dnets ] );

# Fixme: return only the first element of dnets (length has to be 1)
on BACnet::NPDU if ( ( self.control.nlmessage == 1 ) && ( self.message_type == BACnet::NPDU_type::I-Could-Be-Router-To-Network  ) )
  -> event bacnet_npdu_i_could_be_router_to_network ($conn, BACnet::bro_npdu_info(self), [ cast<uint64>(i) for i in self.npdu_message.dnets ], cast<uint64>(self.npdu_message.performance_index) );

on BACnet::NPDU if ( ( self.control.nlmessage == 1 ) && ( self.message_type == BACnet::NPDU_type::Reject-Message-To-Network  ) )
  -> event bacnet_npdu_reject_message_to_network ($conn, BACnet::bro_npdu_info(self), [ cast<uint64>(i) for i in self.npdu_message.dnets ], self.npdu_message.reason );

on BACnet::NPDU if ( ( self.control.nlmessage == 1 ) && ( self.message_type == BACnet::NPDU_type::What-Is-Network-Number  ) )
  -> event bacnet_npdu_what_is_network_number ($conn, BACnet::bro_npdu_info(self));

on BACnet::NPDU if ( ( self.control.nlmessage == 1 ) && ( self.message_type == BACnet::NPDU_type::Network-Numer-Is  ) )
  -> event bacnet_npdu_network_number_is ($conn, BACnet::bro_npdu_info(self), cast<uint64>(self.npdu_message.network_number), cast<uint64>(self.npdu_message.learned) );

# Message is used for ACK as well as for the initial message. Check message_type for the type...
on BACnet::NPDU if ( ( self.control.nlmessage == 1 ) && (
    self.message_type == BACnet::NPDU_type::Initialize-Routing-Table ||
    self.message_type == BACnet::NPDU_type::Initialize-Routing-Table-Ack
  ) )
  -> event bacnet_npdu_routing_table_change ($conn, BACnet::bro_npdu_info(self), [ BACnet::bro_npdu_routing_entry(i) for i in self.npdu_message.routing_entries ] );

# Fixme: return only the first element of dnet (length has to be 1)
on BACnet::NPDU if ( (  self.control.nlmessage == 1 ) && ( self.message_type == BACnet::NPDU_type::Establish-Connection-To-Network ) )
  -> event bacnet_npdu_establish_connection_to_network ($conn, BACnet::bro_npdu_info(self), [ cast<uint64>(i) for i in self.npdu_message.dnets ], cast<uint64>(self.npdu_message.termination_time) );

## BACnet APDU Messages

# This should cover all possible classes of APDU messages. Due to the fact that we do not yet support sending optional values to Bro,
# only the information that has to be present in the protocol is sent into the events. For the moment, this basically is the invokeID and
# the chosen service.

on BACnet::PDU_confirmedRequest
  -> event bacnet_apdu_confirmed_request ($conn, cast<uint64>(self.invokeID), self.confirmed_service_choice);

on BACnet::PDU_unconfirmedRequest
  -> event bacnet_apdu_unconfirmed_request ($conn, self.service_choice);

on BACnet::PDU_simpleACK
  -> event bacnet_apdu_simple_ack ($conn, cast<uint64>(self.invokeID), self.service_choice);

on BACnet::BACnet_ComplexACK_PDU
  -> event bacnet_apdu_complex_ack ($conn, cast<uint64>(self.invokeID), self.confirmed_service_choice);

on BACnet::BACnet_SegmentACK_PDU
  -> event bacnet_apdu_segment_ack ($conn, cast<uint64>(self.invokeID), cast<uint64>(self.sequence_number), cast<uint64>(self.actual_window_size));

on BACnet::PDU_error
  -> event bacnet_apdu_error ($conn, cast<uint64>(self.invokeID), cast<uint64>(self.error-class), cast<uint64>(self.error-code));

on BACnet::PDU_reject
  -> event bacnet_apdu_reject ($conn, cast<uint64>(self.invokeID), self.reject_reason);

on BACnet::PDU_abort
  -> event bacnet_apdu_abort ($conn, cast<uint64>(self.invokeID), self.abort_reason);

# A few unconfirmed requests -- at the moment only device discovery

on BACnet::I_Am_Request
  -> event bacnet_i_am_request ($conn, self.iAmDeviceIdentifier.oid.tpe, cast<uint64>(self.iAmDeviceIdentifier.oid.data.instanceNumber),
    cast<uint64>(self.maxAPDULengthAccepted.unsigned), cast<uint64>(self.segmentationSupported.unsigned), self.vendorID);

# FIXME: neither value has to be present :(
on BACnet::Who_Is_Request
  -> event bacnet_who_is_request ($conn, cast<uint64>(self.deviceInstanceRangeLowLimit), cast<uint64>(self.deviceInstanceRangeHighLimit));

# Fixme: once again, not a single value in the request has to be present. At the moment this only works if the values we expect arrive.
# we need optionals to support the other cases.
# one of these two cases will fail.
on BACnet::Who_Has_Request if ( self.objectIdentifier.tag.tag == 2)
  -> event bacnet_who_has_request_device ($conn, self.objectIdentifier.oid.tpe, cast<uint64>(self.objectIdentifier.oid.data.instanceNumber) );

on BACnet::Who_Has_Request if ( self.objectIdentifier.tag.tag == 3)
  -> event bacnet_who_has_request_name ($conn, self.objectName.characters.value);

on BACnet::I_Have_Request
  -> event bacnet_i_have_request ($conn, self.deviceIdentifier.oid.tpe, cast<uint64>(self.deviceIdentifier.oid.data.instanceNumber),
    self.objectIdentifier.oid.tpe, cast<uint64>(self.objectIdentifier.oid.data.instanceNumber), self.objectName.characters.value);
