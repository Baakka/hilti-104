# TODO:
#
#   - How to pass Name.labels? Can pass a list right now, and we'd
#     actually want is a single bytes objects; that will need a
#	  list.join() method.

grammar dns.pac2;

protocol analyzer pac2::DNS over UDP:
    parse with DNS::Message,
    port 53/udp,
    port 137/udp,
    port 5353/udp,
    port 5355/udp,
    replaces DNS;

##

   # TODO: Length of raw payload?
on DNS::Message::header -> event dns_message($conn, $is_orig, DNS::bro_msg(self.header), cast<uint64>(0));

##

on DNS::Question if ( msg.header.flags.qr == 0 )
    -> event dns_request($conn, DNS::bro_msg(msg.header), DNS::bro_name(self.qname), self.qtype, self.qclass);

on DNS::Question if ( msg.header.flags.qr == 1 && ! msg.header.rejected )
    -> event dns_query_reply($conn, DNS::bro_msg(msg.header), DNS::bro_name(self.qname), self.qtype, self.qclass);

on DNS::Question if ( msg.header.flags.qr == 1 && msg.header.rejected )
    -> event dns_rejected($conn, DNS::bro_msg(msg.header), DNS::bro_name(self.qname), self.qtype, self.qclass);

on DNS::Message
    -> event dns_end($conn, DNS::bro_msg(self.header));

##

# Mimic Bro in generating these when there's no question to parse.

on DNS::Message if ( |self.question| == 0 && ! self.header.rejected )
    -> event dns_query_reply($conn, DNS::bro_msg(self.header), b"<no query>", cast<uint64>(0), cast<uint64>(0));

on DNS::Message if ( |self.question| == 0 && self.header.rejected )
    -> event dns_rejected($conn, DNS::bro_msg(self.header), b"<no query>", cast<uint64>(0), cast<uint64>(0));

##

on DNS::ResourceRecord if ( self.ty == DNS::RDType::A )
    -> event dns_A_reply($conn, DNS::bro_msg(msg.header), DNS::bro_answer(self, rrtype), self.a);

on DNS::ResourceRecord if ( self.ty == DNS::RDType::AAAA )
    -> event dns_AAAA_reply($conn, DNS::bro_msg(msg.header), DNS::bro_answer(self, rrtype), self.a);

on DNS::ResourceRecord if ( self.ty == DNS::RDType::NS )
    -> event dns_NS_reply($conn, DNS::bro_msg(msg.header), DNS::bro_answer(self, rrtype), DNS::bro_name(self.rname));

on DNS::ResourceRecord if ( self.ty == DNS::RDType::CNAME )
    -> event dns_CNAME_reply($conn, DNS::bro_msg(msg.header), DNS::bro_answer(self, rrtype), DNS::bro_name(self.rname));

on DNS::ResourceRecord if ( self.ty == DNS::RDType::PTR )
    -> event dns_PTR_reply($conn, DNS::bro_msg(msg.header), DNS::bro_answer(self, rrtype), DNS::bro_name(self.rname));

on DNS::ResourceRecord if ( self.ty == DNS::RDType::MX )
    -> event dns_MX_reply($conn, DNS::bro_msg(msg.header), DNS::bro_answer(self, rrtype), DNS::bro_name(self.mx.name), self.mx.preference);

on DNS::ResourceRecord if ( self.ty == DNS::RDType::SOA )
    -> event dns_SOA_reply($conn, DNS::bro_msg(msg.header), DNS::bro_answer(self, rrtype), DNS::bro_soa(self.soa));

on DNS::ResourceRecord if ( self.ty == DNS::RDType::TXT )
    -> event dns_TXT_reply($conn, DNS::bro_msg(msg.header), DNS::bro_answer(self, rrtype), b";".join([i.data for i in self.txt]));

on DNS::ResourceRecord if ( self.ty == DNS::RDType::WKS )
    -> event dns_WKS_reply($conn, DNS::bro_msg(msg.header), DNS::bro_answer(self, rrtype));

# Bro 2.2 doesn't actually generate this one.
#on DNS::ResourceRecord if ( self.ty == DNS::RDType::SRV )
#    -> event dns_SRV_reply($conn, DNS::bro_msg(msg.header), DNS::bro_answer(self, rrtype));

################

# on DNS::ResourceRecord if ( self.ty == DNS::RDType::A6 )
#    -> event dns_A6_reply($conn, DNS::bro_msg(msg.header), DNS::bro_answer(self, rrtype), a: addr)

# TODO: some more events may be missing that aren't used by base/protocol/dns.
