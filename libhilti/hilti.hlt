#
# User-visible libhilti functions and types.
#

module Hilti

declare "C-HILTI" void print(any obj, bool newline = True)
declare "C-HILTI" string fmt(string fmt, tuple<*> vals)
declare "C-HILTI" void abort()
declare "C-HILTI" void sleep(double secs)
declare "C-HILTI" void wait_for_threads()

declare "C-HILTI" int<64> bytes_to_int(ref<bytes> b, int<64> base=10)
declare "C-HILTI" ref<bytes> bytes_to_lower(ref<bytes> b)
declare "C-HILTI" bool bytes_starts_with(ref<bytes> b, ref<bytes> s)

## Predefined exceptions.

# FIXME: Add the other internal exceptions here as well.

# Top-level root exception.
type Exception = exception &libhilti="hlt_exception_unspecified"

# Raised when a division by zero is attempted.
type DivisionByZero = exception<string> &libhilti="hlt_exception_division_by_zero"

# Raised when a container element is not found.
type IndexError = exception<string> &libhilti="hlt_exception_index_error"

# Raised when an operation cannot complete immediately but would
# need to block.
type WouldBlock = exception<string> &libhilti="hlt_exception_would_block"

## Raised when for a hook declared as returning a value, no
## implementation has already done so.
type NoHookResult = exception<string> &libhilti="hlt_exception_no_hook_result"

# Raised for invalid values.
type ValueError = exception<string> &libhilti="hlt_exception_value_error"

# Raised when a HILTI function called from C yields.
type Yield = exception<string> &libhilti="hlt_exception_yield"

# Raised when a value is accessed that isn't set.
type UndefinedValue = exception<string> &libhilti="hlt_exception_undefined_value"

# Raised when an overlay's field is accessed before attaching it.
type OverlayNotAttached = exception &libhilti="hlt_exception_overlay_not_attached"

# Raised when a debug.assert statement failed.
type AssertionError = exception<string> &libhilti="hlt_exception_assertion_error"

# Raised by debug.internal_error.
type InternalError = exception<string> &libhilti="hlt_exception_internal_error"

# Raised when an I/O source is running out of input.
type IOSrcExhausted = exception &libhilti="hlt_exception_iosrc_exhausted"

# Raised when an I/O source is running out of input.
type NoThreadContext = exception &libhilti="hlt_exception_no_thread_context"


## Defines the valid formats for the ref:op:`unpack` operator. 
type Packed = enum {
    # String
    ASCIIZ,

    # Integer
    # %doc-packed-int-start
    Int8,    		#  8-bit signed integer in host byte order.
    Int16,          # 16-bit signed integer in host byte order.
    Int32,          # 32-bit signed integer in host byte order.
    Int64,          # 64-bit signed integer in host byte order.
    Int8Big,        #  8-bit signed integer in big-endian byte order.
    Int16Big,       # 16-bit signed integer in big-endian byte order.
    Int32Big,       # 32-bit signed integer in big-endian byte order.
    Int64Big,       # 64-bit signed integer in big-endian byte order.
    Int8Little,     #  8-bit signed integer in little-endian byte order.
    Int16Little,    # 16-bit signed integer in little-endian byte order.
    Int32Little,    # 32-bit signed integer in little-endian byte order.
    Int64Little,    # 64-bit signed integer in little-endian byte order.
    UInt8,    		#  8-bit unsigned integer in host byte order.
    UInt16,         # 16-bit unsigned integer in host byte order.
    UInt32,         # 32-bit unsigned integer in host byte order.
    UInt64,         # 64-bit unsigned integer in host byte order.
    UInt8Big,       #  8-bit unsigned integer in big-endian byte order.
    UInt16Big,      # 16-bit unsigned integer in big-endian byte order.
    UInt32Big,      # 32-bit unsigned integer in big-endian byte order.
    UInt64Big,      # 64-bit unsigned integer in big-endian byte order.
    UInt8Little,    #  8-bit unsigned integer in little-endian byte order.
    UInt16Little,   # 16-bit unsigned integer in little-endian byte order.
    UInt32Little,   # 32-bit unsigned integer in little-endian byte order.
    UInt64Little,   # 64-bit unsigned integer in little-endian byte order.
    # %doc-packed-int-end

    # Addr
    # %doc-packed-addr-start
    IPv4,           # 32-bit IPv4 address stored in host byte order.
    IPv6,           # 128-bit IPv6 address stored in host byte order.
    IPv4Network,    # 32-bit IPv4 address stored in network byte order.
    IPv6Network,    # 128-bit IPv6 address stored in network byte order.
    IPv4Little,     # 32-bit IPv4 address stored in little endian order.
    IPv4Big,        # 32-bit IPv4 address stored in big endian order.
    IPv6Big,        # 128-bit IPv6 address stored in big endian order.
    IPv6Little,     # 128-bit IPv6 address stored in little endian order.
    # %doc-packed-addr-end

    # Port
    # %doc-packed-port-start
    PortTCP,           # A 16-bit TCP port value stored in host byte order.
    PortUDP,           # A 16-bit UDP port value stored in network byte order.
    PortTCPNetwork,    # A 16-bit TCP port value stored in host byte order.
    PortUDPNetwork,    # A 16-bit UDP port value stored in network byte order.
    # %doc-packed-port-end

    # Bool
    Bool,              # A single byte.

    # Bytes
    # %doc-packed-bytes-start
    BytesRunLength,    # A series of bytes preceded by an uint indicating its length; the argument must be one of Packed::UInt*.
    BytesFixed,        # A series of bytes of fixed length specified by an additional integer argument
    BytesDelim,        # A series of bytes delimited by a final byte-sequence specified by an additional argument.

    # Variants just advancing the iterator but not returning any value.
    SkipBytesRunLength,
    SkipBytesFixed,
    SkipBytesDelim

    # %doc-packed-bytes-end


}

type AddrFamily = enum { IPv4, IPv6 }
type Protocol = enum { TCP, UDP }
type ByteOrder = enum { Little, Big }
type ExpireStrategy = enum { Create, Access }
type IOSrc = enum { PcapLive, PcapOffline }
type FileMode = enum { Create, Append }
type FileType = enum { Text, Binary }

type ProfileStyle = enum {
    Standard,    # Record on "update".
    Time,        # Record after intervals of <n> nsecs in timer_mgr's time.
    Updates,     # Record after <n> calls to "update".

    # Not implemented. Not sure we can easily/efficiently.
    Wall,        # Record after interval of <n> nsecs in wall time.
    Cycles       # Record after <n> CPU cycles. 
    }


