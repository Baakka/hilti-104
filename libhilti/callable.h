///
/// All thread-global state is stored in execution contexts.

#ifndef HLT_CALLABLE_H
#define HLT_CALLABLE_H

#include "memory_.h"
#include "rtti.h"
#include "threading.h"
#include "types.h"

// Static part of callable description. This is function-specific but not
// argument specific.
//
// Adapt hlt.callable.func when making changes here!
//
// TODO: This would be better move into RTTI.
typedef struct {
    void* run; // Run function with HILTI linkage.
    void*
        run_c; // Run function with HILTI-C linkage that can be called from C via HLT_CALLABLE_RUN.
    void (*dtor)(hlt_callable* callable, hlt_execution_context* ctx); // Dtor function.
    void (*clone_init)(hlt_callable* dst, hlt_callable* src, __hlt_clone_state* cstate,
                       hlt_exception** excpt, hlt_execution_context* ctx); // Clone init function.
    int64_t object_size; // Total size of the __hlt_callable object.
} __hlt_callable_func;

// Definition of a callable.
//
// Adapt hlt.callable when making changes here!
struct __hlt_callable {
    __hlt_gchdr __gch;           // Header for garbage collection.
    __hlt_callable_func* __func; // Pointer to the set of function for the callable.
    // ;                                   // Arguments follow here in memory.
};

/// Executes a callable from C.
///
/// callable: The hlt_callable instance.
///
/// target: A pointer to memory where to store the result value. It must be
/// sufficiently sized. If the callback's result type is void, this will not
/// be used and be null.
///
/// prototype: Function prototupe for the callable. This can be generated by
/// declaring a HILTI type \c "type Foo = callable<int, string>" and then running \c "hiltic -P".
///
/// args: The arguments to the callable, with the standard addtional HILTI-C arguments.
#define HLT_CALLABLE_RUN(callable, target, prototype, ...)                                         \
    (*(prototype)((callable)->__func->run_c))((callable), target, __VA_ARGS__)

#endif
