> <<HEADER>> h

#ifndef $STDIFDEF
#define $STDIFDEF

#include <hilti/builder/nodes.h>
#include <hilti/instruction.h>
#include <hilti/statement.h>
#include <hilti/instructions/optypes.h>

===
> <<FOOTER>> h

#endif

===
>> iBegin h
namespace hilti { namespace statement { namespace instruction { namespace $NAMESPACE {
    class $CLASS : public hilti::statement::instruction::Resolved {
        AST_RTTI
    public:
        $CLASS(shared_ptr<::hilti::Instruction> instruction,
               const hilti::instruction::Operands& ops,
               const Location& l = Location::None)
                   : Resolved(instruction, ops, l)
                { }

        ACCEPT_VISITOR(hilti::statement::instruction::Resolved)
    };
} } } }

namespace hilti { namespace instruction { namespace $NAMESPACE { namespace __class {
    class $CLASS : public hilti::Instruction {
        AST_RTTI
    public:
        static shared_ptr<statement::instruction::Resolved> factory(shared_ptr<hilti::Instruction> instruction,
                                                                    const hilti::instruction::Operands& ops,
                                                                    const Location& l = Location::None)
            { return std::make_shared<hilti::statement::instruction::$NAMESPACE::$CLASS>(instruction, ops, l); }

        $CLASS() : hilti::Instruction(std::make_shared<ID>($2), "$NAMESPACE", "$CLASS", factory)
            { }

        virtual ~$CLASS()
            { }

===
> iEnd h
    };
} } }  }

===
> iTarget h
        std::pair<shared_ptr<Type>, bool> __typeOp0() const override;
        bool __matchOp0(shared_ptr<Expression> op, bool coerce) override;
===
> iOp* h
        std::pair<shared_ptr<Type>, bool> __typeOp$POSTFIX() const override;
        bool __matchOp$POSTFIX(shared_ptr<Expression> op, bool coerce) override;
===
> iDefault* h
        shared_ptr<Expression> __default$POSTFIX() const override;
===
> iHideInDebugTrace h
        bool __hideInDebugTrace() const override;
===
> iValidate h
        void __validate(const hilti::instruction::Operands& ops) const override;
===
> iDoc h
        const char* __doc() const override;
===
> iTerminator h
        std::set<shared_ptr<Expression>> __successors(const hilti::instruction::Operands& ops) const override;
        bool __terminator() const override;
===
> iSuccessors h
===
> iFlowInfo h
        FlowInfo __flowInfo(FlowInfo fi) override;
===
> <<HEADER>> cc

#include "$BASENAME.h"

#define __get_op(n) ops[n] ? ops[n]->sharedPtr<Expression>() : shared_ptr<Expression>();

===
>> iBegin cc
namespace hilti { namespace instruction { namespace $NAMESPACE { namespace __class {
===
> iEnd cc

} } }

void __register_$NAMESPACE_$CLASS()
{
    ::hilti::instruction::$NAMESPACE::$CLASS =
        std::make_shared<::hilti::instruction::$NAMESPACE::__class::$CLASS>();
    InstructionRegistry::globalRegistry()->addInstruction(::hilti::instruction::$NAMESPACE::$CLASS);
}

} // namespace hilti

AST_RTTI_BEGIN(hilti::instruction::$NAMESPACE::__class::$CLASS, $NAMESPACE_ID_$CLASS_1)
AST_RTTI_PARENT(hilti::Instruction)
AST_RTTI_END($NAMESPACE_ID_$CLASS_1)
AST_RTTI_CAST_BEGIN(hilti::instruction::$NAMESPACE::__class::$CLASS)
AST_RTTI_CAST_PARENT(hilti::Instruction)
AST_RTTI_CAST_END()

AST_RTTI_BEGIN(hilti::statement::instruction::$NAMESPACE::$CLASS, $NAMESPACE_ID_$CLASS_2)
AST_RTTI_PARENT(hilti::statement::instruction::Resolved)
AST_RTTI_END($NAMESPACE_ID_$CLASS_2)
AST_RTTI_CAST_BEGIN(hilti::statement::instruction::$NAMESPACE::$CLASS)
AST_RTTI_CAST_PARENT(hilti::statement::instruction::Resolved)
AST_RTTI_CAST_END()

===
> iTarget cc
std::pair<shared_ptr<Type>, bool> $CLASS::__typeOp0() const
{
    return std::make_pair($1, false);
}

bool $CLASS::__matchOp0(shared_ptr<Expression> op, bool coerce)
{
    if ( ! op )
        return __defaultOp0() || ast::rtti::isA<type::OptionalArgument>($1);

    if ( coerce ) {
        if ( ! op->canCoerceTo($1) )
            return false;
    }

    else if ( ! $1->equal(op->type()) )
        return false;

    return true;
}

===
> iOp* cc
std::pair<shared_ptr<Type>, bool> $CLASS::__typeOp$POSTFIX() const
{
    return std::make_pair($1, $2);
}

bool $CLASS::__matchOp$POSTFIX(shared_ptr<Expression> op, bool coerce)
{
    if ( ! op )
        return __defaultOp$POSTFIX() || ast::rtti::isA<type::OptionalArgument>($1);

    if ( coerce ) {
        if ( ! op->canCoerceTo($1) )
            return false;
    }

    else if ( ! $1->equal(op->type()) )
        return false;

    return true;
}

===
> iDefault* cc
shared_ptr<Expression> $CLASS::__default$POSTFIX() const
{
    return std::make_shared<expression::Constant>(std::make_shared<Constant>($1));
}

===
> iHideInDebugTrace cc
bool $CLASS::__hideInDebugTrace() const
{
    return true;
}
===
> iValidate cc code-block
void $CLASS::__validate(const hilti::instruction::Operands& ops) const
{
    shared_ptr<Expression> target = __get_op(0);
    shared_ptr<Expression> op1 = __get_op(1);
    shared_ptr<Expression> op2 = __get_op(2);
    shared_ptr<Expression> op3 = __get_op(3);
===
> iDoc cc
const char* $CLASS::__doc() const
{
    return $1;
}
===
> iTerminator cc
bool $CLASS::__terminator() const
{
    return true;
}
===
> iSuccessors cc code-block
std::set<shared_ptr<Expression>> $CLASS::__successors(const hilti::instruction::Operands& ops) const
{
    shared_ptr<Expression> target = __get_op(0);
    shared_ptr<Expression> op1 = __get_op(1);
    shared_ptr<Expression> op2 = __get_op(2);
    shared_ptr<Expression> op3 = __get_op(3);

===
> iFlowInfo cc code-block
FlowInfo $CLASS::__flowInfo(FlowInfo fi)
{
===
