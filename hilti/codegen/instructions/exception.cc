
#include <hilti/hilti-intern.h>

#include "../stmt-builder.h"

using namespace hilti;
using namespace codegen;

void StatementBuilder::visit(statement::instruction::exception::New* i)
{
    auto type = ast::as<expression::Type>(i->op1())->typeValue();
    auto etype = ast::as<type::Exception>(type);

    CodeGen::value_list args;
    args.push_back(cg()->llvmExceptionTypeObject(etype));
    args.push_back(cg()->llvmConstNull());
    args.push_back(cg()->llvmLocationString(i->location()));
    auto result = cg()->llvmCallC("hlt_exception_new", args, false, false);
    cg()->llvmStore(i, result);
}

void StatementBuilder::visit(statement::instruction::exception::NewWithArg* i)
{
    auto type = ast::as<expression::Type>(i->op1())->typeValue();
    auto etype = ast::as<type::Exception>(type);

    auto arg = cg()->llvmValue(i->op2(), etype->argType());
    arg = builder()->CreateBitCast(arg, cg()->llvmTypePtr());

    CodeGen::value_list args;
    args.push_back(cg()->llvmExceptionTypeObject(etype));
    args.push_back(arg);
    args.push_back(cg()->llvmLocationString(i->location()));
    auto result = cg()->llvmCallC("hlt_exception_new", args, false, false);
    cg()->llvmStore(i, result);
}

void StatementBuilder::visit(statement::instruction::exception::Throw* i)
{
    auto op1 = cg()->llvmValue(i->op1());
    cg()->llvmRaiseException(op1);
}

void StatementBuilder::visit(statement::instruction::exception::__BeginHandler* i)
{
    // No code generated by this.

    auto parent = i->firstParent<statement::Block>();
    assert(parent);

    auto const_ = ast::checkedCast<expression::Constant>(i->op1());
    auto label = ast::checkedCast<constant::Label>(const_->constant());
    auto expr = std::make_shared<expression::Constant>(label);

    auto type = i->op2() ? ast::checkedCast<expression::Type>(i->op2())->typeValue() : nullptr;
    auto etype = type ? ast::checkedCast<type::Exception>(type) : nullptr;

    cg()->pushExceptionHandler(expr, etype);
}

void StatementBuilder::visit(statement::instruction::exception::__EndHandler* i)
{
    // No code generated by this.

    cg()->popExceptionHandler();
}

void StatementBuilder::visit(statement::instruction::exception::__GetAndClear* i)
{
    auto result = cg()->llvmCurrentException();
    cg()->llvmCctor(result, i->target()->type(), false, "exception/get-and-clear");
    cg()->llvmClearException();
    cg()->llvmStore(i, result);
}

void StatementBuilder::visit(statement::instruction::exception::__Clear* i)
{
    cg()->llvmClearException();
}
