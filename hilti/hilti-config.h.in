
#ifndef HILTI_CONFIG_H
#define HILTI_CONFIG_H

#include <list>
#include <string>

using std::string;

namespace hilti {

struct Configuration {
    string version       = "${HILTI_VERSION}";
    string prefix        = "${PROJECT_SOURCE_DIR}";
    string distbase      = "${PROJECT_SOURCE_DIR}";
    string path_hiltic   = "${PROJECT_BINARY_DIR}/tools/hiltic";
    string path_clang    = "${LLVM_CLANG_EXEC}";
    string path_clangxx  = "${LLVM_CLANGXX_EXEC}";
    string path_llvm_config = "${LLVM_CONFIG_EXEC}";
    string llvm_triple   = "${LLVM_TRIPLE}";
    string clang_triple  = "${LLVM_TRIPLE_CLANG}";
    string clang_data_layout  = "${LLVM_DATA_LAYOUT_CLANG}";

    string shared_library_prefix = "${CMAKE_SHARED_LIBRARY_PREFIX}";
    string shared_library_suffix = "${CMAKE_SHARED_LIBRARY_SUFFIX}";

    //// Compiler configuration.

    std::list<string> compiler_include_dirs = {
        "${PROJECT_SOURCE_DIR}",
        "${PROJECT_BINARY_DIR}",
        "${PROJECT_SOURCE_DIR}/hilti", // FIXME: Need to unify includes.
        "${PROJECT_BINARY_DIR}/hilti",
    };

    std::list<string> compiler_cflags = {
        "-D_GNU_SOURCE",
        "-D__STDC_CONSTANT_MACROS",
        "-D__STDC_FORMAT_MACROS",
        "-D__STDC_LIMIT_MACROS",
    };

    std::list<string> compiler_cxxflags = {
        "-D_GNU_SOURCE",
        "-D__STDC_CONSTANT_MACROS",
        "-D__STDC_FORMAT_MACROS",
        "-D__STDC_LIMIT_MACROS",
        "-fno-rtti",
    };

    string compiler_llvm_cxxflags = "${LLVM_CXXFLAGS_AS_STRING}";

    std::list<string> compiler_library_dirs = {
        "${PROJECT_BINARY_DIR}/hilti",
        "${LLVM_LIB_DIR}"
    };

    std::list<string> compiler_ldflags = {
        "-L${PROJECT_BINARY_DIR}/hilti",
        "-Wl,-rpath,${PROJECT_BINARY_DIR}/hilti"
    };

    string compiler_llvm_libraries = "${LLVM_LIBS_AS_STRING}";
    string compiler_llvm_ldflags = "${LLVM_LDFLAGS_AS_STRING}";

    std::list<string> compiler_static_libraries = {
        "hilti"
    };

    std::list<string> compiler_shared_libraries = {
    };

    std::list<string> compiler_static_libraries_jit = {
    };

    std::list<string> compiler_shared_libraries_jit = {
    };

    //// Runtime configuration.

    string runtime_library_bca      = "${PROJECT_BINARY_DIR}/libhilti/libhilti-rt.bc";
    string runtime_library_bca_dbg  = "${PROJECT_BINARY_DIR}/libhilti/libhilti-rt-dbg.bc";
    string runtime_library_a        = "${PROJECT_BINARY_DIR}/libhilti/libhilti-rt-native.a";
    string runtime_typeinfo_hlt     = "${PROJECT_SOURCE_DIR}/libhilti/type-info.hlt";

    std::list<string> runtime_include_dirs = {
        "${PROJECT_SOURCE_DIR}",
        "${PROJECT_BINARY_DIR}",
        "${PROJECT_SOURCE_DIR}/libhilti",
        "${PROJECT_BINARY_DIR}/libhilti",
    };

    std::list<string> runtime_cflags = {
        "-std=c99"
    };

    std::list<string> runtime_cxxflags = {
    };

    std::list<string> runtime_ldflags = {
        "-L${PROJECT_SOURCE_DIR}/libhilti",
        "-L${PROJECT_BINARY_DIR}/libhilti",
        "-Wl,-rpath,${PROJECT_BINARY_DIR}/libhilti",
#ifdef __linux__
        "-Wl,-Thilti-linux.ld",
#endif
    };

    std::list<string> runtime_ldflags_dbg = {
    };

    std::list<string> runtime_shared_libraries = {
        "pcap",
#ifdef __linux__
        "m",
        "pthread",
        "dl",
#endif

#if ${HAVE_PAPI}
        "papi",
#endif

#if ${HAVE_PERFTOOLS}
        "tcmalloc",
#endif
    };

    ////

    std::list<string> hilti_library_dirs = {
        "${PROJECT_SOURCE_DIR}/libhilti"
    };
};

inline const Configuration& configuration()
{
    static Configuration cfg;
    return cfg;
}

}

#endif
