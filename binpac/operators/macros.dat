> <<HEADER>> h

#ifndef $STDIFDEF
#define $STDIFDEF

#include "expression.h"
#include "operator.h"

===
> <<FOOTER>> h

#endif

===
>> opBegin h

namespace binpac { namespace operator_ {
namespace $NAMESPACE {

class $CLASS : public binpac::Operator
{
public:
   $CLASS();
   virtual ~$CLASS();
protected:
===
> opOp1 h
   shared_ptr<Type> __typeOp1() const;
===
> opOp2 h
   shared_ptr<Type> __typeOp2() const;
===
> opOp3 h
   shared_ptr<Type> __typeOp3() const;
===
> opCallArg1 h
   std::pair<string, shared_ptr<Type>> __typeCallArg1() const;
===
> opCallArg2 h
   std::pair<string, shared_ptr<Type>> __typeCallArg2() const;
===
> opCallArg3 h
   std::pair<string, shared_ptr<Type>> __typeCallArg3() const;
===
> opCallArg4 h
   std::pair<string, shared_ptr<Type>> __typeCallArg4() const;
===
> opCallArg5 h
   std::pair<string, shared_ptr<Type>> __typeCallArg5() const;
===
> opValidate h
   void __validate() override;
===
> opMatch h
   bool __match() override;
===
> opDoc h
   string __doc() const override;
===
> opResult h
   shared_ptr<Type> __typeResult() const override;
===
> opSimplify h
   shared_ptr<Expression> __simplify() const override;
===
> opEnd h
private:
    static shared_ptr<expression::ResolvedOperator> _factory(shared_ptr<Operator> op, const expression_list& ops, const Location& l);
};

} // namespace $NAMESPACE
} // namespace operator_

namespace expression { namespace operator_ {
namespace $NAMESPACE {

class $CLASS : public ResolvedOperator
{
public:
    $CLASS(shared_ptr<Operator> op, const expression_list& ops, const Location& l);
    ACCEPT_VISITOR(::binpac::expression::ResolvedOperator);
};

} // namespace $NAMESPACE
} // namespace resolved
} // namespace expression
} // namespace binpac

===
> <<HEADER>> cc

#include "$BASENAME.h"

===
>> opBegin cc

namespace binpac {

operator_::$NAMESPACE::$CLASS::$CLASS() : Operator(operator_::$CLASSARG, _factory)
{
}

operator_::$NAMESPACE::$CLASS::~$CLASS()
{
}

expression::operator_::$NAMESPACE::$CLASS::$CLASS(shared_ptr<Operator> op, const expression_list& ops, const Location& l)
    :  expression::ResolvedOperator(op, ops, l)
{
}
===
> opOp1 cc
shared_ptr<Type> operator_::$NAMESPACE::$CLASS::__typeOp1() const
{
    return $1;
}
===
> opOp2 cc
shared_ptr<Type> operator_::$NAMESPACE::$CLASS::__typeOp2() const
{
    return $1;
}
===
> opOp3 cc
shared_ptr<Type> operator_::$NAMESPACE::$CLASS::__typeOp3() const
{
    return $1;
}
===
> opCallArg1 cc
std::pair<string, shared_ptr<Type>> operator_::$NAMESPACE::$CLASS::__typeCallArg1() const
{
    return std::make_pair($1, $2);
}
===
> opCallArg2 cc
std::pair<string, shared_ptr<Type>> operator_::$NAMESPACE::$CLASS::__typeCallArg2() const
{
    return std::make_pair($1, $2);
}
===
> opCallArg3 cc
std::pair<string, shared_ptr<Type>> operator_::$NAMESPACE::$CLASS::__typeCallArg3() const
{
    return std::make_pair($1, $2);
}
===
> opCallArg4 cc
std::pair<string, shared_ptr<Type>> operator_::$NAMESPACE::$CLASS::__typeCallArg4() const
{
    return std::make_pair($1, $2);
}
===
> opCallArg5 cc
std::pair<string, shared_ptr<Type>> operator_::$NAMESPACE::$CLASS::__typeCallArg5() const
{
    return std::make_pair($1, $2);
}
===
> opValidate cc
void operator_::$NAMESPACE::$CLASS::__validate()
===
> opMatch cc
bool operator_::$NAMESPACE::$CLASS::__match()
===
> opDoc cc
string operator_::$NAMESPACE::$CLASS::__doc() const
{
    return $1;
}
===
> opResult cc
shared_ptr<Type> operator_::$NAMESPACE::$CLASS::__typeResult() const
===
> opSimplify cc
shared_ptr<Expression> operator_::$NAMESPACE::$CLASS::__simplify() const
===
> opEnd cc
shared_ptr<expression::ResolvedOperator> operator_::$NAMESPACE::$CLASS::_factory(shared_ptr<Operator> op, const expression_list& ops, const Location& l)
{
    return shared_ptr<expression::ResolvedOperator>(new expression::operator_::$NAMESPACE::$CLASS(op, ops, l));
}

void __register_$NAMESPACE_$CLASS()
{
    shared_ptr<Operator> op(new operator_::$NAMESPACE::$CLASS);
    OperatorRegistry::globalRegistry()->addOperator(op);
}

} // namespace binpac

===
